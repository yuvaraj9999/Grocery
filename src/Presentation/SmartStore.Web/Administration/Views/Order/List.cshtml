@model OrderListModel
@{
    ViewBag.Title = T("Admin.Orders").Text;
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="section-header">
        <div class="title">
            <i class="far fa-chart-bar"></i>
            @T("Admin.Orders")
        </div>
        <div class="options d-flex">
            @{ Html.RenderWidget("admin_button_toolbar_before"); }

            <div class="input-group d-inline-flex mr-3" style="width: 400px">
                @Html.TextBoxFor(model => Model.GoDirectlyToNumber, new { @class = "form-control", placeholder = T("Admin.Orders.List.GoDirectlyToNumber") })
                <div class="input-group-append">
                    <button type="submit" class="btn btn-secondary" id="go-to-order-by-number" name="go-to-order-by-number" value="go-to-order-by-number" title="@T("Admin.Orders.List.GoDirectlyToNumber.Hint")">
                        <i class="fa fa-search"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-toggle-filter" data-toggle="button" aria-pressed="false">
                        <i class="fa fa-filter"></i>
                        <span>@T("Common.Filter")</span>
                        <i class="fa fa-angle-double-down"></i>
                    </button>
                </div>
            </div>

            <div class="dropdown dropdown-menu-right mx-1">
                <a class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" href="#">
                    @T("Admin.Common.Export.PDF")
                </a>
                <div class="dropdown-menu dropdown-menu-right">
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ExportPdf")">
                        <i class="far fa-fw fa-file-pdf"></i>
                        <span class="order-process-title">@T("Admin.Common.ExportToPdf.Selected")</span>
                    </a>
                    <a href="javascript:void(0)" class="dropdown-item process-orders all-allowed" data-url="@Url.Action("ExportPdf")" data-msg="@T("Admin.Common.AskToProceed")">
                        <i class="far fa-fw fa-file-pdf"></i>
                        <span class="order-process-title">@T("Admin.Common.ExportToPdf.All")</span>
                    </a>
                </div>
            </div>

            @{ Html.RenderWidget("admin_button_toolbar_after"); }

            <div class="dropdown dropdown-menu-right">
                <button class="btn btn-secondary dropdown-toggle no-chevron" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fa fa-fw fa-ellipsis-h"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                    <div class="dropdown-header h6 text-uppercase">
                        @T("Admin.Orders.Fields.OrderStatus")
                    </div>
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ProcessOrder", new { operation = "complete" })">
                        <i class="fa fa-fw fa-check"></i>
                        <span class="order-process-title">@T("Enums.SmartStore.Core.Domain.Orders.OrderStatus.Complete")</span>
                    </a>
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ProcessOrder", new { operation = "cancel" })">
                        <i class="fa fa-fw fa-times"></i>
                        <span class="order-process-title">@T("Admin.Orders.Fields.OrderStatus.Cancel")</span>
                    </a>
                    <div class="dropdown-divider"></div>
                    <div class="dropdown-header h6 text-uppercase">
                        @T("Admin.Orders.Fields.PaymentStatus")
                    </div>
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ProcessOrder", new { operation = "markpaid" })" title="@T("Admin.Orders.Fields.MarkAsPaid.Hint")">
                        <i class="fa fa-fw"></i>
                        <span class="order-process-title">@T("Admin.Orders.Fields.MarkAsPaid")</span>
                    </a>
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ProcessOrder", new { operation = "capture" })" title="@T("Admin.Orders.Fields.Capture.Hint")">
                        <i class="fas fa-fw fa-euro-sign"></i>
                        <span class="order-process-title">@T("Admin.Orders.Fields.Capture")</span>
                    </a>
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ProcessOrder", new { operation = "refundoffline" })" title="@T("Admin.Orders.Fields.RefundOffline.Hint")">
                        <i class="fa fa-fw"></i>
                        <span class="order-process-title">@T("Admin.Orders.Fields.RefundOffline")</span>
                    </a>
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ProcessOrder", new { operation = "refund" })" title="@T("Admin.Orders.Fields.Refund.Hint")">
                        <i class="fas fa-fw fa-undo-alt"></i>
                        <span class="order-process-title">@T("Admin.Orders.Fields.Refund")</span>
                    </a>
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ProcessOrder", new { operation = "voidoffline" })" title="@T("Admin.Orders.Fields.VoidOffline.Hint")">
                        <i class="fa fa-fw"></i>
                        <span class="order-process-title">@T("Admin.Orders.Fields.VoidOffline")</span>
                    </a>
                    <a href="javascript:void(0)" class="dropdown-item process-orders" data-url="@Url.Action("ProcessOrder", new { operation = "void" })" title="@T("Admin.Orders.Fields.Void.Hint")">
                        <i class="fa fa-fw fa-times"></i>
                        <span class="order-process-title">@T("Admin.Orders.Fields.Void")</span>
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3 grid-filter" style="display: none">
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.StartDate)
            @Html.EditorFor(model => Model.StartDate)
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.EndDate)
            @Html.EditorFor(model => Model.EndDate)
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.CustomerName)
            @Html.EditorFor(model => Model.CustomerName)
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.CustomerEmail)
            @Html.EditorFor(model => Model.CustomerEmail)
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.OrderGuid)
            @Html.EditorFor(model => Model.OrderGuid)
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.OrderNumber)
            @Html.EditorFor(model => Model.OrderNumber)
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.PaymentMethods)
            @Html.DropDownList("PaymentMethods", Model.AvailablePaymentMethods, null, new { multiple = "multiple", @class = "form-control" })
        </div>
        @if (Model.AvailableStores.Count > 1)
        {
            <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
                @Html.SmartLabelFor(model => model.StoreId)
                @Html.DropDownListFor(model => model.StoreId, Model.AvailableStores, T("Admin.Common.All"), new { @class = "form-control" })
            </div>
        }
        else
        {
            <div class="col-xl-3"></div>
        }
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.OrderStatusIds)
            @Html.DropDownList("OrderStatusIds", Model.AvailableOrderStatuses, null, new { multiple = "multiple", @class = "form-control" })
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.PaymentStatusIds)
            @Html.DropDownList("PaymentStatusIds", Model.AvailablePaymentStatuses, null, new { multiple = "multiple", @class = "form-control" })
        </div>
        <div class="col-sm-6 col-lg-4 col-xl-3 form-group">
            @Html.SmartLabelFor(model => model.ShippingStatusIds)
            @Html.DropDownList("ShippingStatusIds", Model.AvailableShippingStatuses, null, new { multiple = "multiple", @class = "form-control" })
        </div>

        <div class="col-sm-6 col-lg-4 col-xl-3 form-group ml-auto">
            @Html.SmartLabel(string.Empty, string.Empty)
            <button type="submit" id="btnSearch" class="btn btn-warning btn-block">
                <span>@T("Admin.Common.ApplyFilter")</span>
            </button>
        </div>
    </div>

    { Html.RenderAction("OrderGrid", "Order"); }

    <script>
		@*Used by widget SmartStore.CommonExportProviders::ExportButtonsGeneral.cshtml*@
		var selectedIds = [];
		var reportAggregates = "";

        $(function() {

            // Filter (enter) key listener.
            $('.grid-filter').on('keypress', function (e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    $('#btnSearch').click();
                }
            });

			// Filter toggler.
			$('.btn-toggle-filter').on('click', function (e) {
				$('.grid-filter').slideToggle({ duration: 200, easing: 'ease-in-out' });
			});

			// Search button.
			$('#btnSearch').click(function () {
				var grid = $('#orders-grid').data('tGrid');
				// New search. Set page size to 1.
				grid.currentPage = 1;
				grid.ajaxRequest();
				// Clear selected checkboxes.
				$('.checkboxGroups').attr('checked', false).change();
				selectedIds = [];
				return false;
			});

			// Order processing commands (order and payment status, PDF export...).
			$('a.process-orders').click(function (e) {
				e.preventDefault();

				var link = $(this);
				var allAllowed = link.hasClass('all-allowed');
				var processSelectedMsg = @T("Admin.Orders.ProcessSelectedOrders").JsText;
				var processAllMsg = @T("Admin.Common.AskToProceed").JsText;

				if (!allAllowed && selectedIds.length === 0) {
					alert2({
						message: @T("Admin.Orders.NoOrdersSelected").JsText,
						icon: { type: 'warning' }
					});
					return;
				}

				var msg = link.data('msg') || (selectedIds.length === 0 ? processAllMsg : processSelectedMsg.replace('{0}', selectedIds.length));

				confirm2({
					title: link.find('.order-process-title').text(),
                    message: msg,
                    icon: { type: 'question' },
					callback: function (accepted) {
						if (!accepted)
							return;

                        var form = '<form class="order-processing-form" action="' + link.data('url') + '" method="post">';
                        form += '<input type="hidden" name="selectedIds" value="' + selectedIds.join(',') + '" />';
                        form += '<input type="hidden" name="__RequestVerificationToken" value="' + $('input[name="__RequestVerificationToken"]').val() + '" />';
						form += '</form>';

						$('body').append(form);
						$('form.order-processing-form').last().submit();
                    }
                });

				return false;
            });
        });
    </script>
}