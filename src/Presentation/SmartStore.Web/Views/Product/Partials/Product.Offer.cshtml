@model ProductDetailsModel

@using SmartStore.Web.Models.Catalog;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Web;
@{
    var conditionContent = "http://schema.org/";

    switch (Model.Condition)
    {
        case ProductCondition.Damaged:
            conditionContent += "DamagedCondition";
            break;
        case ProductCondition.Used:
            conditionContent += "UsedCondition";
            break;
        case ProductCondition.Refurbished:
            conditionContent += "RefurbishedCondition";
            break;
        case ProductCondition.New:
        default:
            conditionContent += "NewCondition";
            break;
    }
}
<div class="pd-offer" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
    <meta itemprop="itemCondition" content="@conditionContent" />
    <link itemprop="url" href="@Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Request.Url.Scheme)" />
    @if (!Model.AddToCart.DisableBuyButton || !Model.AddToCart.DisableWishlistButton || Model.ProductPrice.ShowLoginNote)
    {
        if (Model.AddToCart.CustomerEntersPrice && !Model.ProductPrice.HidePrices)
        {
            var dataDictCustomerPrice = new ViewDataDictionary();
            dataDictCustomerPrice.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
            Html.RenderPartial("Product.CustomerPrice", Model, dataDictCustomerPrice);
        }
        else
        {
            <div class="pd-offer-price-container" data-partial="Price">
                @{ Html.RenderPartial("Product.Offer.Price", Model); }
            </div>
        }
    }

    <meta itemprop="availability" content="@(Model.IsAvailable ? "http://schema.org/InStock" : "http://schema.org/SoldOut")" />

    @if (Model.ProductPrice.PriceValidUntilUtc.HasValue())
    {
        <meta itemprop="priceValidUntil" content="@Model.ProductPrice.PriceValidUntilUtc" />
    }

    <div class="pd-stock-info-container" data-partial="Stock">
        @{ Html.RenderPartial("Product.StockInfo", Model); }
    </div>

    @if (Model.GiftCard.IsGiftCard)
    {
        var dataDictGiftCard = new ViewDataDictionary();
        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = Model.GiftCardFieldPrefix;
        Html.RenderPartial("Product.GiftCard", Model.GiftCard, dataDictGiftCard);
    }

    @if (Model.ProductType != ProductType.BundledProduct && Model.ProductVariantAttributes.ShouldBeRendered())
    {
        <div class="pd-variants-container" data-partial="Variants">
            @{
                var dataDictVariants = new ViewDataDictionary();
                dataDictVariants.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                Html.RenderPartial("Product.Variants", Model.ProductVariantAttributes, dataDictVariants);
            }
        </div>
    }

    <div class="pd-offer-actions-container" data-partial="OfferActions">
        @{
            var dataDictAddToCart = new ViewDataDictionary();
            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
            Html.RenderPartial("Product.Offer.Actions", Model, dataDictAddToCart);
        }
    </div>

    @{ Html.RenderPartial("Product.Offer.Actions.Misc", Model); }
</div>

<script>
    // Ask question
    $(document).on('click', '.action-ask-question', function (e) {
        e.preventDefault();
        const el = $(this);
		const form = el.data('form-selector');
		if (form) {  
			const href = el.data('href');
            $.ajax({
				cache: false,
                url: href,
                data: $(form).serialize(),
				success: function (response) {
					// Redirect to ask question get action
					if (response.redirect)
						location.href = response.redirect;
				}
            });
        }
    });
</script>